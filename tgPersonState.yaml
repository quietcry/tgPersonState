blueprint:
  name: Extened person state
  domain: automation
  description: >-
    Provides a text entity with a configurable state.<br>The configured state conditions are checked in turn and the last one that is true is returned
  input:
    debugmode:
      name: "debug mode"
      description: Configuration
      default: false
      selector:
        boolean:

    linked_person:
      name: Person entity [mandatory]
      description: a person entity, preferably linked to a tracker
      selector:
        entity:
          multiple: false
          filter:
            domain: person
    linked_activitybutton:
      name: is activ button [optional]
      description: a Boolean helper that indicates whether the person's state is tracked by this blueprint
      default: "-"
      selector:
        entity:
          multiple: false
          filter:
            domain: input_boolean
    linked_field:
      name: state text-entity [optional]
      description: The determined status is written into this text entity
      default: "-"
      selector:
        entity:
          multiple: false
          filter:
            domain: input_text
    addPersonName:
      name: add person name to state [default = false]
      description: if true, the state text in textfield starts with the username<br>e.g. user!home 
      default: false
      selector:
        boolean:



    status_1:
      name: state 1 [optional]
      icon: mdi:cog
      collapsed: true
      description: Configuration state
      input:  
        status_1_name:
          name: State [optional]
          description: if set, this will be returned as status as soon as at least one of the linked devices is true<br>e.g. homeoffice 
          default:
        status_1_basisstatus:
          name: refers to state [optional]
          description: if set, the status is only set if the person entity has the status specified here<br>e.g. home
          default:
        status_1_linked_devices:
          name: devices [optional]
          description: linked devices (trackers or binary sensors) that provides an on/off state  
          default: "-"
          selector:
            entity:
              multiple: true          
              filter:
                domain: 
                  - device_tracker
                  - binary_sensor
        status_1_schedule:
          name: Schedule [optional]
          description: If set, the state will only be set when the schedule is enabled
          default: "-"
          selector:
            entity:
              filter:
                domain: schedule
    status_2:
      name: state 2 [optional]
      icon: mdi:cog
      collapsed: true
      description: Configuration state
      input:  
        status_2_name:
          name: State [optional]
          description: if set, this will be returned as status as soon as at least one of the linked devices is true<br>e.g. homeoffice 
          default:
        status_2_basisstatus:
          name: refers to state [optional]
          description: if set, the status is only set if the person entity has the status specified here<br>e.g. home
          default:
        status_2_linked_devices:
          name: devices [optional]
          description: linked devices (trackers or binary sensors) that provides an on/off state  
          default: "-"
          selector:
            entity:
              multiple: true          
              filter:
                domain: 
                  - device_tracker
                  - binary_sensor
        status_2_schedule:
          name: Schedule [optional]
          description: If set, the state will only be set when the schedule is enabled
          default: "-"
          selector:
            entity:
              filter:
                domain: schedule
    status_3:
      name: state 3 [optional]
      icon: mdi:cog
      collapsed: true
      description: Configuration state
      input:  
        status_3_name:
          name: State [optional]
          description: if set, this will be returned as status as soon as at least one of the linked devices is true<br>e.g. homeoffice 
          default:
        status_3_basisstatus:
          name: refers to state [optional]
          description: if set, the status is only set if the person entity has the status specified here<br>e.g. home
          default:
        status_3_linked_devices:
          name: devices [optional]
          description: linked devices (trackers or binary sensors) that provides an on/off state  
          default: "-"
          selector:
            entity:
              multiple: true          
              filter:
                domain: 
                  - device_tracker
                  - binary_sensor
        status_3_schedule:
          name: Schedule [optional]
          description: If set, the state will only be set when the schedule is enabled
          default: "-"
          selector:
            entity:
              filter:
                domain: schedule

    status_4:
      name: state 4 [optional]
      icon: mdi:cog
      collapsed: true
      description: Configuration state
      input:  
        status_4_name:
          name: State [optional]
          description: if set, this will be returned as status as soon as at least one of the linked devices is true<br>e.g. homeoffice 
          default:
        status_4_basisstatus:
          name: refers to state [optional]
          description: if set, the status is only set if the person entity has the status specified here<br>e.g. home
          default:
        status_4_linked_devices:
          name: devices [optional]
          description: linked devices (trackers or binary sensors) that provides an on/off state  
          default: "-"
          selector:
            entity:
              multiple: true          
              filter:
                domain: 
                  - device_tracker
                  - binary_sensor
        status_4_schedule:
          name: Schedule [optional]
          description: If set, the state will only be set when the schedule is enabled
          default: "-"
          selector:
            entity:
              filter:
                domain: schedule
    status_5:
      name: state 5 [optional]
      icon: mdi:cog
      collapsed: true
      description: Configuration state
      input:  
        status_5_name:
          name: State [optional]
          description: if set, this will be returned as status as soon as at least one of the linked devices is true<br>e.g. homeoffice 
          default:
        status_5_basisstatus:
          name: refers to state [optional]
          description: if set, the status is only set if the person entity has the status specified here<br>e.g. home
          default:
        status_5_linked_devices:
          name: devices [optional]
          description: linked devices (trackers or binary sensors) that provides an on/off state  
          default: "-"
          selector:
            entity:
              multiple: true          
              filter:
                domain: 
                  - device_tracker
                  - binary_sensor
        status_5_schedule:
          name: Schedule [optional]
          description: If set, the state will only be set when the schedule is enabled
          default: "-"
          selector:
            entity:
              filter:
                domain: schedule




variables:

  linked_person: !input linked_person
  linked_field: !input linked_field
  linked_activitybutton: !input linked_activitybutton
  addPersonName: !input addPersonName
  debugmode: !input debugmode
  debugMsg: ""
  active_status: inactive


  observable: [
              {
              'status': !input status_1_name,
              'basisstatus': !input status_1_basisstatus,
              'devices': !input status_1_linked_devices,
              'schedule': !input status_1_schedule,
              },
              {
              'status': !input status_2_name,
              'basisstatus': !input status_2_basisstatus,
              'devices': !input status_2_linked_devices,
              'schedule': !input status_2_schedule,
              },
              {
              'status': !input status_3_name,
              'basisstatus': !input status_3_basisstatus,
              'devices': !input status_3_linked_devices,
              'schedule': !input status_3_schedule,
              },
              {
              'status': !input status_4_name,
              'basisstatus': !input status_4_basisstatus,
              'devices': !input status_4_linked_devices,
              'schedule': !input status_4_schedule,
              },
              {
              'status': !input status_5_name,
              'basisstatus': !input status_5_basisstatus,
              'devices': !input status_5_linked_devices,
              'schedule': !input status_5_schedule,
              }
              ]
  observed: >-
    {%- macro observer(itemlist) -%}
    {%- for item in itemlist -%}
      {%- if item.status is defined and item.status and item.status != "-" -%}
        {%- set test = item.schedule -%}
        {%- if test and test != "-" and states(test) != 'unknown' -%}
          {%- set ns.myEntities = ns.myEntities + [test] -%}
        {%- endif -%}
        {%- set test = item.devices -%}
        {%- if test and test is string and test != "-" and states(test) != 'unknown' -%}
          {%- set ns.myEntities = ns.myEntities + [test] -%}
        {%- elif test and test is list -%}
          {%- for device in test -%}
            {%- if device and device != "-" and states(device) != 'unknown' -%}
              {%- set ns.myEntities = ns.myEntities + [device] -%}
            {%- endif -%}
          {%- endfor -%} 
        {%- endif -%}
      {%- endif -%}
    {%- endfor -%}
    {%- endmacro -%}
    {%- set ns = namespace(myEntities=[])%}
    {%- set ns.myEntities = ns.myEntities + [linked_person] + [linked_activitybutton]%}

    {%- set status = observer(observable)  -%}
    {{- ns.myEntities -}}

  sendmessage: true


trigger:
  - platform: event
    event_type: state_changed
  - platform: state
    entity_id: input_boolean.reloadconfig
    from: "on"
    to: "off"
    id: "reloadConfig"

condition:
  - condition: or
    conditions:
      - condition: trigger
        id:
          - reloadConfig
      - condition: template
        value_template: " {%- if trigger.event.data.entity_id in observed -%}true{%- endif -%}"

action:
  - variables:
      my_status: >-
        {%- macro getStatus(item, person, isActive) -%}
          {%- set tmp = namespace(isError = false) -%}   
          {%- set stat = namespace(stat = "-") -%}   
          {%- set test = states(isActive) -%}
          {%- if test != "on" -%}
            {%- set tmp.isError = true -%}  
            {%- set stat.stat = "inactive" -%}  
          {%- endif -%}
          {# Test BasisStatus#}
          {%- if item.basisstatus -%}
            {%- set basestats = item.basisstatus.split(';') -%}
            {%- if not states(person) in basestats -%} 
              {% set tmp.isError = true %}  
            {%- endif -%}
          {%- endif -%}
          {# Test Status is set#}
          {%- if item.status is not defined or not item.status or item.status == "-" -%} 
            {% set tmp.isError = true %}              
          {%- endif -%}
          {# Test schedule is not set or aktive #}
          {%- if item.schedule is defined and item.schedule != "-" and states(item.schedule) != 'on' -%} 
            {% set tmp.isError = true %}              
          {%- endif -%}
          {# Test devices is aktive #}
          {%- if tmp.isError == false -%} 
            {%- if item.devices and item.devices is string and item.devices != "-" -%}
              {%- set test = [item.devices] -%}
            {%- elif item.devices and item.devices is list -%}
              {%- set test = item.devices -%}
            {%- else -%}
              {%- set test = [] -%}
            {%- endif -%}
            {%- for device in test -%}              
              {%- if device and device != "-" -%}
                {%- if states(device) == 'on' or states(device) == 'home' -%}
                  {%- set stat.stat = item.status -%} 
                  {%- break -%}
                {%- endif -%}
              {%- endif -%}
            {%- endfor -%}            
          {%- endif -%}
          {%- if stat.stat != "-" -%} 
            {{- stat.stat -}}
          {%- endif -%}

        {%- endmacro -%}
        {#-------------------------------------------#}
        {%- set mystatus = namespace(stat=states(linked_person)) -%}
        {%- set name = state_attr(linked_person, "friendly_name")  -%}
        {%- for line in observable -%}
          {%- set status = getStatus(line, linked_person, linked_activitybutton)  -%}
          {%- if status is defined and status -%} 
            {%- set mystatus.stat = status  -%} 
          {%- endif -%}
        {%- endfor -%}
        {%- if addPersonName is defined and addPersonName -%}
          {{- name~"!"~mystatus.stat -}}
        {%- else -%}  
          {{- mystatus.stat -}}
        {%- endif -%}
  - if:
      - condition: template
        value_template: "{{states(linked_field) != my_status}}"
    then:
      - action: input_text.set_value
        metadata: {}
        data:
          value: "{{my_status}}"
        target:
          entity_id: "{{linked_field}}"
  - if:
      - condition: template
        value_template: "{{debugmode}}"
    then:
      - variables:
          debugMsg: >-
            {{debugMsg ~ "h,pte"}}
      - action: notify.persistent_notification
        metadata: {}
        data:
          title: "Debug TgPersonState"
          message: >-
            {{debugMsg}}
            <hr>triggered by: <ul><li>{%- if "id" in trigger -%}{{- trigger["id"] }}{%- endif %} [<i>{%- if "entity_id" in trigger -%}{{- trigger["entity_id"] }}{%- else -%}{{- trigger -}}{%- endif -%}</i>]</li></ul>



mode: single


